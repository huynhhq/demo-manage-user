# View https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

# Dependency
orbs:
  node: circleci/node@1.1.6

# Declare Command
commands:
  install:
    description: |
      Install custom versions of NodeJS, and optionally NPM/Yarn, in any
      execution environment (Docker/Linux, macOS, machine) that does not have
      it preinstalled.

      Recommendation: It is highly recommended to utilize an environment such as Docker with Node preinstalled.
    parameters:
      install-npm:
        default: true
        description: Install NPM?
        type: boolean
      node-install-dir:
        default: /usr/local
        description: |
          Where should Node.js be installed?
        type: string
      node-version:
        default: "12.16.1"
        description: |
          You may specify a full version tag ("12.16.1"), "latest", "current", "lts", or "stable". The latest (current) version of NodeJS will be installed by default. For a full list of releases, see the following: https://nodejs.org/en/download/releases
        type: string
      npm-version:
        default: latest
        description: |
          Pick a version of NPM to install: https://nodejs.org/en/download/releases
        type: string
    steps:
      - run:
          command: |
            # PLATFORM CHECK: mac vs. alpine vs. other linux

            SYS_ENV_PLATFORM=linux
            if uname -a | grep Darwin; then
              SYS_ENV_PLATFORM=darwin
            elif cat /etc/issue | grep Alpine; then
              SYS_ENV_PLATFORM=alpine
            fi
            echo "System is $SYS_ENV_PLATFORM"
            # FUNCTIONS
            installation_check () {
              if command -v node; then

                if node --version | grep "$NODE_ORB_INSTALL_VERSION"; then

                  echo "Node.js $NODE_ORB_INSTALL_VERSION is already installed"
                  exit 0
                else
                  echo "A different version of Node.js is installed ($(node --version)); removing it"

                  $SUDO rm -rf "$(command -v node)"
                  $SUDO rm -rf "$(command -v node | sed -E 's|node||')/nodejs"

                  $SUDO rm -rf "$(command -v npm)"

                  $SUDO rm -rf \
                    /usr/local/lib/node_modules \
                    /usr/local/include/node_modules \
                    /opt/local/lib/node_modules

                fi
              fi
            }

            # Install logic per platform

            case $SYS_ENV_PLATFORM in
              alpine)
                echo "Install for alpine, or remove"
              ;;
              darwin)
                if ! command -v gpg; then
                  HOMEBREW_NO_AUTO_UPDATE=1 brew install gnupg
                  HOMEBREW_NO_AUTO_UPDATE=1 brew install coreutils
                fi
              ;;
            esac

            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

              get_node_version
              installation_check

              # Configure Security Keys for verification of Download

              $SUDO curl \
                --silent --show-error --location --fail --retry 3 \
                https://raw.githubusercontent.com/nodejs/node/master/README.md | \
                grep -E '[A-Z0-9]{40}' | \
                sed -E 's/gpg --keyserver pool.sks-keyservers.net --recv-keys //g' | \
                sed -E 's/(`|\$ )//g' > \
                NODEJS_TRUSTED_RELEASE_KEYS

              cat > KEYSERVERS \<< EOM
              hkp://p80.pool.sks-keyservers.net:80
              hkp://ipv4.pool.sks-keyservers.net
              hkp://pgp.mit.edu:80
              hkps://ha.pool.sks-keyservers.net
              hkp://keyserver.ubuntu.com:80
            EOM

              echo "Importing Node.js trusted release keys..."
              # https://stackoverflow.com/a/26217767
              while read key; do
                for keyserver in $(cat KEYSERVERS); do
                  tempName=$(mktemp)
                  gpg --status-fd 1 \
                    --keyserver "$keyserver" --keyserver-options "timeout=1" \
                    --recv-keys "$key" 1> "$tempName" 2>/dev/null || true
                  if [[ $(grep "^\[GNUPG\:\] IMPORT_OK "[[:digit:]]*" "$key"$" $tempName && \
                    grep "^\[GNUPG\:\] IMPORT_RES 1" $tempName) ]]; then
                    echo "Success! Imported $key from $keyserver"
                    break
                  else
                    continue
                  fi
                done
              done < NODEJS_TRUSTED_RELEASE_KEYS

              $SUDO rm -f NODEJS_TRUSTED_RELEASE_KEYS KEYSERVERS

              # Download binary
              echo Node binary downloaded
              echo "Downloading: https://nodejs.org/download/release/v$NODE_ORB_INSTALL_VERSION/node-v$NODE_ORB_INSTALL_VERSION-$SYS_ENV_PLATFORM-x64.tar.gz"
              $SUDO curl -O \
                --silent --show-error --location --fail --retry 3 \
                "https://nodejs.org/download/release/v$NODE_ORB_INSTALL_VERSION/node-v$NODE_ORB_INSTALL_VERSION-$SYS_ENV_PLATFORM-x64.tar.gz"

              # Download SHASUMS256 and sig
              echo Fetching SHASUM256 verification
              curl -O --silent --show-error --location --fail --retry 3 https://nodejs.org/dist/v$NODE_ORB_INSTALL_VERSION/SHASUMS256.txt
              curl -O --silent --show-error --location --fail --retry 3 https://nodejs.org/dist/v$NODE_ORB_INSTALL_VERSION/SHASUMS256.txt.sig

              # Verify checksum file sig
              echo Verifing SHASUM256
              gpg --verify SHASUMS256.txt.sig SHASUMS256.txt

              # Verify checksum of binary
              echo Verifing binary checksum
              grep node-v$NODE_ORB_INSTALL_VERSION-$SYS_ENV_PLATFORM-x64.tar.gz SHASUMS256.txt | sha256sum -c -

              # Install Binary
              echo Installing Node binary
              $SUDO tar -xzf "node-v$NODE_ORB_INSTALL_VERSION-$SYS_ENV_PLATFORM-x64.tar.gz" \
                -C <<parameters.node-install-dir>> \
                --strip-components=1 --no-same-owner > /dev/null 2>&1

              # Remove tar.gz
              echo Cleaning up installation file
              $SUDO rm -f "node-v$NODE_ORB_INSTALL_VERSION-$SYS_ENV_PLATFORM-x64.tar.gz"

              if [[ ! -e <<parameters.node-install-dir>>/bin/nodejs ]]; then
                $SUDO ln -s <<parameters.node-install-dir>>/bin/node <<parameters.node-install-dir>>/bin/nodejs
              fi

            # test/verify version

            if node --version | grep "$VERSION" > /dev/null; then
              echo "Node.js $(node --version) has been installed to $(which node)"
            else
              echo "Something went wrong; the specified version of Node.js could not be installed"
              exit 1
            fi
          name: Installing NodeJS <<parameters.node-version>>

jobs:
  install-node-example:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - node/install:
          install-npm: true
          node-version: latest
      - run: node --version
  install_env:
    executor:
      name: node/default
    steps:
      - install
  build-and-test:
    executor:
      name: node/default
    steps:
      - checkout
      - node/with-cache:
          steps:
            - run: npm install
            - run: npm test
workflows:
    version: 2
    install-and-build:
      jobs:
        - install_env:
            filters:
              branches:
                only:
                  - master
                  - develop
        - build-and-test:
            requires:
              - install_env
            filters:
              branches:
                only:
                  - master
                  - develop
